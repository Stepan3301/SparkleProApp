-- Admin Database Fixes SQL Script
-- This script ensures all necessary tables, columns, and relationships are properly configured

-- 1. Ensure assigned_cleaners column exists in bookings table
DO $$ 
BEGIN 
    -- Check if the column exists
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'bookings' 
        AND column_name = 'assigned_cleaners'
        AND table_schema = 'public'
    ) THEN
        -- Add the column if it doesn't exist
        ALTER TABLE public.bookings 
        ADD COLUMN assigned_cleaners uuid[] NULL DEFAULT '{}'::uuid[];
        
        -- Add index for performance
        CREATE INDEX IF NOT EXISTS idx_bookings_assigned_cleaners 
        ON public.bookings USING gin (assigned_cleaners);
        
        RAISE NOTICE 'assigned_cleaners column added to bookings table';
    ELSE
        RAISE NOTICE 'assigned_cleaners column already exists in bookings table';
    END IF;
END $$;

-- 2. Ensure cleaners table exists (this should already exist from your setup)
-- If not, this will create it
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'cleaners' AND table_schema = 'public') THEN
        CREATE TABLE public.cleaners (
            id uuid NOT NULL DEFAULT gen_random_uuid(),
            name character varying(255) NOT NULL,
            phone character varying(20) NULL,
            sex character varying(10) NULL,
            avatar_url text NULL,
            is_active boolean NULL DEFAULT true,
            created_at timestamp with time zone NULL DEFAULT now(),
            updated_at timestamp with time zone NULL DEFAULT now(),
            created_by uuid NULL,
            updated_by uuid NULL,
            CONSTRAINT cleaners_pkey PRIMARY KEY (id),
            CONSTRAINT cleaners_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users (id),
            CONSTRAINT cleaners_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users (id),
            CONSTRAINT cleaners_sex_check CHECK (
                (sex)::text = ANY (
                    ARRAY['male'::character varying, 'female'::character varying, 'other'::character varying]::text[]
                )
            )
        );

        -- Add indexes
        CREATE INDEX IF NOT EXISTS idx_cleaners_active ON public.cleaners USING btree (is_active);
        CREATE INDEX IF NOT EXISTS idx_cleaners_name ON public.cleaners USING btree (name);

        RAISE NOTICE 'cleaners table created';
    ELSE
        RAISE NOTICE 'cleaners table already exists';
    END IF;
END $$;

-- 3. Ensure booking_additional_services table exists
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'booking_additional_services' AND table_schema = 'public') THEN
        CREATE TABLE public.booking_additional_services (
            id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
            booking_id bigint NOT NULL,
            additional_service_id bigint NOT NULL,
            quantity integer NOT NULL DEFAULT 1,
            unit_price numeric(10, 2) NOT NULL,
            total_price numeric(10, 2) NOT NULL,
            created_at timestamp with time zone NOT NULL DEFAULT now(),
            CONSTRAINT booking_additional_services_pkey PRIMARY KEY (id),
            CONSTRAINT fk_additional_service FOREIGN KEY (additional_service_id) REFERENCES additional_services (id),
            CONSTRAINT fk_booking FOREIGN KEY (booking_id) REFERENCES bookings (id) ON DELETE CASCADE
        );

        -- Add indexes
        CREATE INDEX IF NOT EXISTS idx_booking_additional_services_booking_id 
        ON public.booking_additional_services USING btree (booking_id);
        
        CREATE INDEX IF NOT EXISTS idx_booking_additional_services_service_id 
        ON public.booking_additional_services USING btree (additional_service_id);

        RAISE NOTICE 'booking_additional_services table created';
    ELSE
        RAISE NOTICE 'booking_additional_services table already exists';
    END IF;
END $$;

-- 4. Ensure additional_services table exists
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'additional_services' AND table_schema = 'public') THEN
        CREATE TABLE public.additional_services (
            id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
            name text NOT NULL,
            description text NULL,
            price numeric(10, 2) NOT NULL,
            unit text NULL,
            is_active boolean NOT NULL DEFAULT true,
            created_at timestamp with time zone NOT NULL DEFAULT now(),
            CONSTRAINT additional_services_pkey PRIMARY KEY (id),
            CONSTRAINT unique_service_name UNIQUE (name)
        );

        -- Add index
        CREATE INDEX IF NOT EXISTS idx_additional_services_active 
        ON public.additional_services USING btree (is_active);

        RAISE NOTICE 'additional_services table created';
    ELSE
        RAISE NOTICE 'additional_services table already exists';
    END IF;
END $$;

-- 5. Grant necessary permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON public.booking_additional_services TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON public.additional_services TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON public.cleaners TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON public.bookings TO authenticated;

-- Grant sequence permissions
GRANT USAGE ON SEQUENCE public.booking_additional_services_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE public.additional_services_id_seq TO authenticated;

-- 6. Enable RLS on all tables
ALTER TABLE public.booking_additional_services ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.additional_services ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cleaners ENABLE ROW LEVEL SECURITY;

-- 7. Add RLS policies for booking_additional_services
DROP POLICY IF EXISTS "Users can view their own booking additional services" ON public.booking_additional_services;
CREATE POLICY "Users can view their own booking additional services" ON public.booking_additional_services
    FOR SELECT USING (
        booking_id IN (
            SELECT id FROM public.bookings WHERE customer_id = auth.uid()
        )
    );

DROP POLICY IF EXISTS "Admins can manage all booking additional services" ON public.booking_additional_services;
CREATE POLICY "Admins can manage all booking additional services" ON public.booking_additional_services
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- 8. Add RLS policies for additional_services
DROP POLICY IF EXISTS "Anyone can view active additional services" ON public.additional_services;
CREATE POLICY "Anyone can view active additional services" ON public.additional_services
    FOR SELECT USING (is_active = true);

DROP POLICY IF EXISTS "Admins can manage all additional services" ON public.additional_services;
CREATE POLICY "Admins can manage all additional services" ON public.additional_services
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- 9. Add RLS policies for cleaners
DROP POLICY IF EXISTS "Anyone can view active cleaners" ON public.cleaners;
CREATE POLICY "Anyone can view active cleaners" ON public.cleaners
    FOR SELECT USING (is_active = true);

DROP POLICY IF EXISTS "Admins can manage all cleaners" ON public.cleaners;
CREATE POLICY "Admins can manage all cleaners" ON public.cleaners
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- 10. Create or update trigger function for cleaners updated_at
CREATE OR REPLACE FUNCTION update_cleaners_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 11. Create trigger for cleaners updated_at
DROP TRIGGER IF EXISTS update_cleaners_updated_at ON public.cleaners;
CREATE TRIGGER update_cleaners_updated_at
    BEFORE UPDATE ON cleaners
    FOR EACH ROW
    EXECUTE FUNCTION update_cleaners_updated_at();

-- 12. Add some sample data if tables are empty (optional)
DO $$
BEGIN
    -- Add sample additional services if table is empty
    IF NOT EXISTS (SELECT 1 FROM public.additional_services LIMIT 1) THEN
        INSERT INTO public.additional_services (name, description, price, unit, is_active) VALUES
        ('Deep Carpet Cleaning', 'Professional deep cleaning of carpets', 50.00, 'per room', true),
        ('Window Cleaning', 'Interior and exterior window cleaning', 30.00, 'per window', true),
        ('Refrigerator Cleaning', 'Deep cleaning of refrigerator interior', 40.00, 'per unit', true),
        ('Oven Cleaning', 'Professional oven deep cleaning', 45.00, 'per unit', true),
        ('Balcony Cleaning', 'Complete balcony cleaning service', 35.00, 'per balcony', true);
        
        RAISE NOTICE 'Sample additional services added';
    END IF;

    -- Add sample cleaners if table is empty
    IF NOT EXISTS (SELECT 1 FROM public.cleaners LIMIT 1) THEN
        INSERT INTO public.cleaners (name, phone, sex, is_active) VALUES
        ('Sarah Johnson', '+971501234567', 'female', true),
        ('Ahmed Hassan', '+971507654321', 'male', true),
        ('Maria Garcia', '+971509876543', 'female', true),
        ('Omar Ali', '+971503456789', 'male', true),
        ('Fatima Al-Zahra', '+971506789012', 'female', true);
        
        RAISE NOTICE 'Sample cleaners added';
    END IF;
END $$;

-- Final verification
SELECT 
    'bookings.assigned_cleaners' as feature,
    CASE WHEN EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'bookings' AND column_name = 'assigned_cleaners'
    ) THEN 'EXISTS' ELSE 'MISSING' END as status
UNION ALL
SELECT 
    'cleaners table' as feature,
    CASE WHEN EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'cleaners'
    ) THEN 'EXISTS' ELSE 'MISSING' END as status
UNION ALL
SELECT 
    'booking_additional_services table' as feature,
    CASE WHEN EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'booking_additional_services'
    ) THEN 'EXISTS' ELSE 'MISSING' END as status
UNION ALL
SELECT 
    'additional_services table' as feature,
    CASE WHEN EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'additional_services'
    ) THEN 'EXISTS' ELSE 'MISSING' END as status;

RAISE NOTICE 'Admin database fixes script completed successfully!';
